# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d54Zs9qT0i3nxqq-mcfQQQqAjF7jxS9k
"""

import streamlit as st
import pandas as pd
import unicodedata
from collections import Counter
import re
import os
from io import BytesIO
from tabulate import tabulate

# ========================= FunÃ§Ãµes auxiliares =========================

def normalizar_texto(texto):
    texto = unicodedata.normalize('NFKD', texto)
    texto = ''.join([c for c in texto if not unicodedata.combining(c)])
    texto = texto.upper().strip()
    texto = re.sub(r'\b\d{1,2}[-:hH]\d{2}\b', '', texto)
    texto = re.sub(r'\b\d{3,4}[Hh]?\b', '', texto)
    texto = re.sub(r'\s+', ' ', texto).strip()
    return texto

def extrair_nomes_com_horario(linha):
    nomes_encontrados = []
    texto = normalizar_texto(linha)
    for nome_base in NOMES_BASE_NORMALIZADOS:
        padrao = rf'\b{re.escape(nome_base)}(?:\s*\d{{1,2}}[-â€“]\d{{1,2}}H)?\b'
        resultados = re.findall(padrao, texto)
        for encontrado in resultados:
            nomes_encontrados.append(encontrado.strip())
            texto = texto.replace(encontrado, '')
    return nomes_encontrados

def contar_valores_txt(conteudo):
    linhas = conteudo.splitlines()
    contagem = Counter()
    for linha in linhas:
        nomes = extrair_nomes_com_horario(linha)
        contagem.update(nomes)
    return contagem

def calcular_horas(nome, qtd):
    nome_upper = nome.upper()
    if "13-19H" in nome_upper or "7-13H" in nome_upper:
        return qtd * 6
    return qtd * 12

def definir_valor_hora(nome, horas, qtd, origem_arquivo):
    nome_limpo = normalizar_texto(nome)
    if "BRENO BRANDAO" in nome_limpo:
        return 145.83
    if "WELLINGTON FORTE" in nome_limpo:
        return 150.00
    if origem_arquivo == 'vasc.txt':
        return 158.33
    nomes_145 = ['IGOR SENA', 'BRENO BRANDAO 13-19H', 'JOAO MARCEL']
    horas_por_vez = horas // qtd if qtd else 0
    if origem_arquivo == 'cg.txt':
        if horas_por_vez == 6:
            return 145.833 if nome_limpo in nomes_145 else 125
        else:
            return 125
    return None

def definir_coordenacao(nome):
    nome_limpo = normalizar_texto(nome)
    if nome_limpo == "IGOR SENA":
        return 8000.00
    elif nome_limpo == "BRENO BRANDAO":
        return 17748.12
    else:
        return 0.00

def definir_inss(nome):
    nome_limpo = normalizar_texto(nome)
    return 470.58 if nome_limpo in NOMES_INSS_NORMALIZADOS else 0.00

def contar_presencas_fim_de_semana(conteudo):
    dias_fds = {'7', '8', '14', '15', '21', '22', '28', '29'}
    contagem_fds = Counter()
    linhas = conteudo.splitlines()
    colunas_fds = {}

    for linha in linhas:
        partes = linha.strip().split('\t')
        for idx, valor in enumerate(partes):
            if valor.strip() in dias_fds:
                colunas_fds[idx] = valor.strip()

    for linha in linhas:
        partes = linha.strip().split('\t')
        for idx, valor in enumerate(partes):
            if idx in colunas_fds and valor:
                nomes = extrair_nomes_com_horario(valor)
                contagem_fds.update(nomes)

    return contagem_fds

# ========================= Listas fixas =========================

NOMES_BASE = [...]  # mesma lista que vocÃª tem
NOMES_INSS_ORIGINAIS = [...]  # mesma lista que vocÃª tem
NOMES_BASE_NORMALIZADOS = [normalizar_texto(nome) for nome in NOMES_BASE]
NOMES_INSS_NORMALIZADOS = [normalizar_texto(nome) for nome in NOMES_INSS_ORIGINAIS]

# ========================= Interface Streamlit =========================

st.set_page_config(page_title="RelatÃ³rio MÃ©dico", layout="wide")
st.title("ðŸ“‹ Sistema de RelatÃ³rio MÃ©dico")

cg_file = st.file_uploader("Upload CG.txt", type=["txt"])
vasc_file = st.file_uploader("Upload VASC.txt", type=["txt"])

if st.button("ðŸ“Š Gerar RelatÃ³rio"):
    if not cg_file or not vasc_file:
        st.warning("Por favor, envie os dois arquivos (CG e VASC).")
    else:
        conteudo_cg = cg_file.read().decode('utf-8')
        conteudo_vasc = vasc_file.read().decode('utf-8')
        arquivos = [('cg.txt', conteudo_cg), ('vasc.txt', conteudo_vasc)]
        contagem_fds = contar_presencas_fim_de_semana(conteudo_cg)
        contagem_total = []

        for nome_arquivo, conteudo in arquivos:
            contagem = contar_valores_txt(conteudo)

            for nome_norm, qtd_total in contagem.items():
                qtd_fds = contagem_fds.get(nome_norm, 0) if nome_arquivo == 'cg.txt' else 0
                qtd_util = qtd_total - qtd_fds

                nome_limpo = normalizar_texto(nome_norm)
                valor_hora_fds = (
                    145.83 if "BRENO BRANDAO" in nome_limpo else
                    150.00 if "WELLINGTON FORTE" in nome_limpo else
                    (133.33 if nome_arquivo == 'cg.txt' else 150.00)
                )

                horas = calcular_horas(nome_norm, qtd_util)
                valor_hora = definir_valor_hora(nome_norm, horas, qtd_util, nome_arquivo)
                coordenacao = definir_coordenacao(nome_norm)
                inss = definir_inss(nome_norm)

                producao = (qtd_fds * valor_hora_fds*12) + (qtd_util * valor_hora*12) if valor_hora else "-"
                ted = producao + coordenacao - inss if producao != "-" else "-"

                contagem_total.append([
                    nome_arquivo, nome_norm, qtd_total, qtd_fds, qtd_util,
                    horas, valor_hora_fds, valor_hora, producao, coordenacao, inss, ted
                ])

        df_resultado = pd.DataFrame(contagem_total, columns=[
            "Arquivo", "Nome", "Total de Vezes", "Fds", "Util", "Horas Trabalhadas",
            "Valor Hora Fds", "Valor Hora", "ProduÃ§Ã£o", "CoordenaÃ§Ã£o", "INSS", "TED"
        ])

        st.success("âœ… RelatÃ³rio gerado com sucesso!")
        st.dataframe(df_resultado)

        buffer_excel = BytesIO()
        df_resultado.to_excel(buffer_excel, index=False, sheet_name="RelatÃ³rio")
        buffer_excel.seek(0)

        st.download_button("ðŸ“¥ Baixar Excel", buffer_excel, file_name="relatorio.xlsx")

        # VocÃª pode implementar PDF com pdfkit, xhtml2pdf ou ReportLab se desejar.